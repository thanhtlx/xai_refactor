diff --git a/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java b/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java
index 540cd782..d6563d09 100644
--- a/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java
+++ b/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java
@@ -404,30 +404,4 @@ public class AmbiguatePropertiesTest extends CompilerTestCase {
         + "(new Bar).b;";
     test(js, output);
   }
-
-  public void testImplementsAndExtends() {
-    String js = ""
-        + "/** @interface */ function Foo() {}\n"
-        + "/**\n"
-        + " * @constructor\n"
-        + " */\n"
-        + "function Bar(){}\n"
-        + "Bar.prototype.y = function() { return 3; };\n"
-        + "/**\n"
-        + " * @constructor\n"
-        + " * @extends {Bar}\n"
-        + " * @implements {Foo}\n"
-        + " */\n"
-        + "function SubBar(){ }\n"
-        + "/** @param {Foo} x */ function f(x) { x.z = 3; }\n"
-        + "/** @param {SubBar} x */ function g(x) { x.z = 3; }";
-    String output = ""
-        + "function Foo(){}\n"
-        + "function Bar(){}\n"
-        + "Bar.prototype.b = function() { return 3; };\n"
-        + "function SubBar(){}\n"
-        + "function f(x) { x.a = 3; }\n"
-        + "function g(x) { x.a = 3; }";
-    test(js, output);
-  }
 }
diff --git a/test/com/google/javascript/jscomp/CompilerRunnerTest.java b/test/com/google/javascript/jscomp/CompilerRunnerTest.java
index 66735304..599bcc21 100644
--- a/test/com/google/javascript/jscomp/CompilerRunnerTest.java
+++ b/test/com/google/javascript/jscomp/CompilerRunnerTest.java
@@ -16,7 +16,7 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.common.base.Joiner;
+import com.google.common.base.Join;
 import com.google.common.collect.Lists;
 import com.google.common.flags.Flags;
 import com.google.javascript.rhino.Node;
@@ -208,8 +208,8 @@ public class CompilerRunnerTest extends TestCase {
   private void test(String[] original, String[] compiled) {
     Compiler compiler = compile(original);
     assertEquals("Expected no warnings or errors\n" +
-        "Errors: \n" + Joiner.on("\n").join(compiler.getErrors()) +
-        "Warnings: \n" + Joiner.on("\n").join(compiler.getWarnings()),
+        "Errors: \n" + Join.join("\n", compiler.getErrors()) +
+        "Warnings: \n" + Join.join("\n", compiler.getWarnings()),
         0, compiler.getErrors().length + compiler.getWarnings().length);
 
     Node root = compiler.getRoot().getLastChild();
diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java
index 871ae51b..fba1ad54 100644
--- a/test/com/google/javascript/jscomp/CompilerTestCase.java
+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java
@@ -16,7 +16,7 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.common.base.Joiner;
+import com.google.common.base.Join;
 import com.google.common.collect.Lists;
 import com.google.javascript.jscomp.CodeChangeHandler.RecentChange;
 import com.google.javascript.rhino.Node;
@@ -611,7 +611,7 @@ public abstract class CompilerTestCase extends TestCase  {
 
     Node root = compiler.parseInputs();
     assertTrue("Unexpected parse error(s): " +
-        Joiner.on("\n").join(compiler.getErrors()), root != null);
+        Join.join("\n", compiler.getErrors()), root != null);
 
     Node externsRoot = root.getFirstChild();
     Node mainRoot = root.getLastChild();
@@ -673,7 +673,7 @@ public abstract class CompilerTestCase extends TestCase  {
 
     if (error == null) {
       assertEquals(
-          "Unexpected error(s): " + Joiner.on("\n").join(compiler.getErrors()),
+          "Unexpected error(s): " + Join.join("\n", compiler.getErrors()),
           0, compiler.getErrorCount());
 
       // Verify the symbol table.
@@ -693,13 +693,13 @@ public abstract class CompilerTestCase extends TestCase  {
         assertEquals(expectedSymbolTableError, stErrors[0].getType());
       } else {
         assertEquals("Unexpected symbol table error(s): " +
-            Joiner.on("\n").join(stErrors),
+            Join.join("\n", stErrors),
             0, stErrors.length);
       }
 
       if (warning == null) {
         assertEquals(
-            "Unexpected warning(s): " + Joiner.on("\n").join(aggregateWarnings),
+            "Unexpected warning(s): " + Join.join("\n", aggregateWarnings),
             0, aggregateWarningCount);
       } else {
         assertEquals("There should be one warning, repeated " + numRepetitions +
@@ -746,8 +746,7 @@ public abstract class CompilerTestCase extends TestCase  {
             "\nResult: " + compiler.toSource(mainRoot) +
             "\n" + explanation, explanation);
       } else if (expected != null) {
-        assertEquals(
-            Joiner.on("").join(expected), compiler.toSource(mainRoot));
+        assertEquals(Join.join("", expected), compiler.toSource(mainRoot));
       }
 
       // Verify normalization is not invalidated.
@@ -800,7 +799,7 @@ public abstract class CompilerTestCase extends TestCase  {
     compiler.init(externsInputs, inputs, getOptions());
     Node root = compiler.parseInputs();
     assertTrue("Unexpected parse error(s): " +
-        Joiner.on("\n").join(compiler.getErrors()), root != null);
+        Join.join("\n", compiler.getErrors()), root != null);
     Node externsRoot = root.getFirstChild();
     Node mainRoot = externsRoot.getNext();
     // Only run the normalize pass, if asked.
diff --git a/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java b/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java
index c4d2bcb8..ce3d95e2 100644
--- a/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java
+++ b/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java
@@ -16,7 +16,7 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.common.base.Joiner;
+import com.google.common.base.Join;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.javascript.jscomp.CheckLevel;
@@ -58,14 +58,14 @@ public class DevirtualizePrototypeMethodsTest extends CompilerTestCase {
    * Combine source strings using '\n' as the separator.
    */
   private static String newlineJoin(String ... parts) {
-    return Joiner.on("\n").join(parts);
+    return Join.join("\n", parts);
   }
 
   /**
    * Combine source strings using ';' as the separator.
    */
   private static String semicolonJoin(String ... parts) {
-    return Joiner.on(";").join(parts);
+    return Join.join(";", parts);
   }
 
   /**
@@ -592,7 +592,7 @@ public class DevirtualizePrototypeMethodsTest extends CompilerTestCase {
         if (nameNode != null) {
           JSType type = node.getJSType();
           typeInformation.add(
-              Joiner.on("").join(
+              Join.join("",
                         Token.name(node.getType()),
                         " ",
                         nameNode.getQualifiedName(),
diff --git a/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java b/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java
index cd34115e..00258fea 100644
--- a/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java
+++ b/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java
@@ -15,7 +15,7 @@
  */
 package com.google.javascript.jscomp;
 
-import com.google.common.base.Joiner;
+import com.google.common.base.Join;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.Sets;
@@ -30,6 +30,7 @@ import java.util.Set;
 import java.util.TreeMap;
 import java.util.TreeSet;
 
+
 /**
  * Unit test for the Compiler DisambiguateProprties pass.
  *
@@ -940,7 +941,7 @@ public class DisambiguatePropertiesTest extends CompilerTestCase {
 
     Node root = compiler.parseInputs();
     assertTrue("Unexpected parse error(s): " +
-        Joiner.on("\n").join(compiler.getErrors()), root != null);
+        Join.join("\n", compiler.getErrors()), root != null);
 
     Node externsRoot = root.getFirstChild();
     Node mainRoot = externsRoot.getNext();
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 4607a4a7..ffc23d82 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -16,7 +16,7 @@
 
 package com.google.javascript.jscomp;
 
-import com.google.common.base.Joiner;
+import com.google.common.base.Join;
 import com.google.common.base.Pair;
 import com.google.common.collect.Sets;
 import com.google.javascript.jscomp.CheckLevel;
@@ -30,6 +30,7 @@ import com.google.javascript.rhino.jstype.ObjectType;
 
 import java.util.Arrays;
 
+
 /**
  * Tests {@link TypeCheck}.
  *
@@ -3903,17 +3904,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "required: boolean");
   }
 
-  public void testIssue86() throws Exception {
-    testTypes(
-        "/** @interface */ function I() {}" +
-        "/** @return {number} */ I.prototype.get = function(){};" +
-        "/** @constructor \n * @implements {I} */ function F() {}" +
-        "/** @override */ F.prototype.get = function() { return true; };",
-        "inconsistent return type\n" +
-        "found   : boolean\n" +
-        "required: number");
-  }
-
   /**
    * Tests that the || operator is type checked correctly, that is of
    * the type of the first argument or of the second argument. See
@@ -6604,8 +6594,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
     externAndJsRoot.setIsSyntheticBlock(true);
 
     assertEquals("parsing error: " +
-        Joiner.on(", ").join(compiler.getErrors()),
-        0, compiler.getErrorCount());
+        Join.join(", ", compiler.getErrors()), 0, compiler.getErrorCount());
 
     // For processing goog.addDependency for forward typedefs.
     new ProcessClosurePrimitives(compiler, CheckLevel.ERROR, true)
@@ -6625,8 +6614,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
 
     if (description == null) {
       assertEquals(
-          "unexpected warning(s) : " +
-          Joiner.on(", ").join(compiler.getWarnings()),
+          "unexpected warning(s) : " + Join.join(", ", compiler.getWarnings()),
           0, compiler.getWarningCount());
     } else {
       assertEquals(1, compiler.getWarningCount());
@@ -6651,7 +6639,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
           new JSError[errors.length - 1]);
     }
     if (errors.length > 0) {
-      fail("unexpected error(s):\n" + Joiner.on("\n").join(errors));
+      fail("unexpected error(s):\n" + Join.join("\n", errors));
     }
 
     JSError[] warnings = compiler.getWarnings();
@@ -6662,7 +6650,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
           new JSError[warnings.length - 1]);
     }
     if (warnings.length > 0) {
-      fail("unexpected warnings(s):\n" + Joiner.on("\n").join(warnings));
+      fail("unexpected warnings(s):\n" + Join.join("\n", warnings));
     }
   }
 
@@ -6693,8 +6681,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
     externAndJsRoot.setIsSyntheticBlock(true);
 
     assertEquals("parsing error: " +
-        Joiner.on(", ").join(compiler.getErrors()),
-        0, compiler.getErrorCount());
+        Join.join(", ", compiler.getErrors()), 0, compiler.getErrorCount());
 
     Scope s = makeTypeCheck().processForTesting(externsNode, n);
     return new Pair<Node, Scope>(n, s);
diff --git a/test/com/google/javascript/jscomp/TypeInferenceTest.java b/test/com/google/javascript/jscomp/TypeInferenceTest.java
index fd17e5a8..38fdf96d 100644
--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java
+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java
@@ -29,16 +29,16 @@ import static com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE;
 import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE;
 import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE;
 
-import com.google.common.base.Joiner;
+import com.google.common.base.Join;
 import com.google.common.collect.Maps;
 import com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState;
-import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.jstype.JSType;
 import com.google.javascript.rhino.jstype.EnumType;
 import com.google.javascript.rhino.jstype.FunctionType;
-import com.google.javascript.rhino.jstype.JSType;
 import com.google.javascript.rhino.jstype.JSTypeNative;
 import com.google.javascript.rhino.jstype.JSTypeRegistry;
 import com.google.javascript.rhino.jstype.StaticSlot;
+import com.google.javascript.rhino.Node;
 
 import junit.framework.TestCase;
 
@@ -76,8 +76,7 @@ public class TypeInferenceTest extends TestCase {
     // Parse the body of the function.
     Node n = compiler.parseTestCode("function() {" + js + "}");
     assertEquals("parsing error: " +
-        Joiner.on(", ").join(compiler.getErrors()),
-        0, compiler.getErrorCount());
+        Join.join(", ", compiler.getErrors()), 0, compiler.getErrorCount());
     n = n.getFirstChild();
     // Create the scope with the assumptions.
     Scope assumedScope =
