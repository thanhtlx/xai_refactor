diff --git a/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java b/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
index 36e8d505..19f2c62b 100644
--- a/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
+++ b/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
@@ -121,27 +121,6 @@ public class ClosureReverseAbstractInterpreterTest extends
         OBJECT_TYPE);
   }
 
-  public void testGoogIsArrayOnNull() throws Exception {
-    testClosureFunction("goog.isArray",
-        null,
-        ARRAY_TYPE,
-        null);
-  }
-
-  public void testGoogIsFunctionOnNull() throws Exception {
-    testClosureFunction("goog.isFunction",
-        null,
-        U2U_CONSTRUCTOR_TYPE,
-        null);
-  }
-
-  public void testGoogIsObjectOnNull() throws Exception {
-    testClosureFunction("goog.isObject",
-        null,
-        OBJECT_TYPE,
-        null);
-  }
-
   private void testClosureFunction(String function, JSType type,
       JSType trueType, JSType falseType) {
     // function(a) where a : type
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index b0803b15..1f96aef4 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -597,24 +597,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "function f(x) { return goog.isObject(x) ? x : []; }", null);
   }
 
-  public void testTypeOfReduction14() throws Exception {
-    // Don't do type inference on GETELEMs.
-    testClosureTypes(
-        CLOSURE_DEFS +
-        "function f(arguments) { " +
-        "  return goog.isString(arguments[0]) ? arguments[0] : 0;" +
-        "}", null);
-  }
-
-  public void testTypeOfReduction15() throws Exception {
-    // Don't do type inference on GETELEMs.
-    testClosureTypes(
-        CLOSURE_DEFS +
-        "function f(arguments) { " +
-        "  return typeof arguments[0] == 'string' ? arguments[0] : 0;" +
-        "}", null);
-  }
-
   public void testQualifiedNameReduction1() throws Exception {
     testTypes("var x = {}; /** @type {string?} */ x.a = 'a';\n" +
         "/** @return {string} */ var f = function() {\n" +
@@ -3491,7 +3473,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
     testTypes(
         "/** @constructor */ var Foo = function() {};" +
         "/** @type {number} */ Foo.prototype.bar = 3;" +
-        "/** @constructor */ var FooAlias = Foo;" +
+        "var FooAlias = Foo;" +
         "/** @return {string} */ function foo() { " +
         "  return (new FooAlias()).bar; }",
         "inconsistent return type\n" +
@@ -4142,27 +4124,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "required: number");
   }
 
-  public void testIssue124() throws Exception {
-    testTypes(
-        "var t = null;" +
-        "function test() {" +
-        "  if (t != null) { t = null; }" +
-        "  t = 1;" +
-        "}");
-  }
-
-  public void testIssue124b() throws Exception {
-    testTypes(
-        "var t = null;" +
-        "function test() {" +
-        "  if (t != null) { t = null; }" +
-        "  t = undefined;" +
-        "}",
-        "condition always evaluates to false\n" +
-        "left : (null|undefined)\n" +
-        "right: null");
-  }
-
   /**
    * Tests that the || operator is type checked correctly, that is of
    * the type of the first argument or of the second argument. See
